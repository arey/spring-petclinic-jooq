plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.2'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.graalvm.buildtools.native' version '0.10.3'
  id 'org.cyclonedx.bom' version '1.10.0'
  id 'io.spring.javaformat' version '0.0.43'
  id "io.spring.nohttp" version "0.0.11"
  id("org.jooq.jooq-codegen-gradle") version "3.19.18"
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'io.spring.javaformat'

gradle.startParameter.excludedTaskNames += [ "checkFormatAot", "checkFormatAotTest" ]

group = 'org.springframework.samples'
version = '3.4.0'

java {
  sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
  mavenCentral()
}

ext.checkstyleVersion = "10.20.1"
ext.springJavaformatCheckstyleVersion = "0.0.43"
ext.webjarsLocatorLiteVersion = "1.0.1"
ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.3.3"
// To keep synchronized with the Spring Boot BOM
ext.jooqVersion = "3.19.18"

dependencies {
  // Workaround for AOT issue (https://github.com/spring-projects/spring-framework/pull/33949) -->
  implementation 'io.projectreactor:reactor-core'

  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-jooq'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars:webjars-locator-lite:${webjarsLocatorLiteVersion}"
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.boot:spring-boot-docker-compose'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mysql'
  checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:${springJavaformatCheckstyleVersion}"
  checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
  jooqCodegen "org.jooq:jooq-meta-extensions:${jooqVersion}"
}

tasks.named('test') {
  useJUnitPlatform()
}

checkstyle {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

checkstyleNohttp {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

tasks.named("formatMain").configure { dependsOn("checkstyleMain") }
tasks.named("formatMain").configure { dependsOn("checkstyleNohttp") }

tasks.named("formatTest").configure { dependsOn("checkstyleTest") }
tasks.named("formatTest").configure { dependsOn("checkstyleNohttp") }

tasks.named("checkFormatMain").configure { dependsOn("jooqCodegen") }
tasks.named("checkFormatMain").configure {
  source = sourceSets.main.java.srcDirs
  exclude 'build/generated-sources/jooq/**'
  exclude '**/generated/**'
}

checkstyleAot.enabled = false
checkstyleAotTest.enabled = false

checkFormatAot.enabled = false
checkFormatAotTest.enabled = false

formatAot.enabled = false
formatAotTest.enabled = false

tasks.named("compileJava") {
  dependsOn(tasks.named("jooqCodegen"))
}

jooq {
  configuration {
    generator {
      database {
        name = "org.jooq.meta.extensions.ddl.DDLDatabase"
        properties {

          // Specify the location of your SQL script.
          // You may use ant-style file matching, e.g. /path/**/to/*.sql
          //
          // Where:
          // - ** matches any directory subtree
          // - * matches any number of characters in a directory / file name
          // - ? matches a single character in a directory / file name
          property {
            key = "scripts"
            value = "src/main/resources/db/h2/schema.sql"
          }

          // The sort order of the scripts within a directory, where:
          //
          // - semantic: sorts versions, e.g. v-3.10.0 is after v-3.9.0 (default)
          // - alphanumeric: sorts strings, e.g. v-3.10.0 is before v-3.9.0
          // - flyway: sorts files the same way as flyway does
          // - none: doesn't sort directory contents after fetching them from the directory
          property {
            key = "sort"
            value = "semantic"
          }

          // The default schema for unqualified objects:
          //
          // - public: all unqualified objects are located in the PUBLIC (upper case) schema
          // - none: all unqualified objects are located in the default schema (default)
          //
          // This configuration can be overridden with the schema mapping feature
          property {
            key = "unqualifiedSchema"
            value = "none"
          }

          // The default name case for unquoted objects:
          //
          // - as_is: unquoted object names are kept unquoted
          // - upper: unquoted object names are turned into upper case (most databases)
          // - lower: unquoted object names are turned into lower case (e.g. PostgreSQL)
          property {
            key = "defaultNameCase"
            value = "as_is"
          }
        }
      }
    }
  }
}
